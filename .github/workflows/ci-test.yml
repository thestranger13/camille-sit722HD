# camille-sit722/.github/workflows/ci-test.yml

name: Stage 1 CI Pipeline - Test and Push Images to ACR

# Trigger the workflow only when code is pushed to 'testing' branch
on:
  push:
    branches:
      - testing 

# Global environment variables that can be used across jobs
env:
  # ACR Login Server (e.g., myregistry.azurecr.io)
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}      
  # This provides unique, traceable tags for each image build
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # Job 1: Test all services 
  test_and_lint_all_services:
    runs-on: ubuntu-latest

    services:
      # Product DB
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d products"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d orders"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Customer DB
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d customers"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        
      # RabbitMQ
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      # 2. Set up Python environment with the latest image base 
      - name: Set up Python 3.11
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: '3.11'

      # 3. Install dependencies and run code quality checks
      - name: Install dependencies
        run: | # Use a multi-line script to install pip dependencies
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      # 4. Run tests for product service
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q
      
      # 5. Run tests for order service
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          RABBITMQ_HOST: localhost
          RABBITMQ_PORT: 5672
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # 6. Run tests for customer service
      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # 7. Set up Node.js for frontend testing 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'   

      # 8. Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm ci          

      # 9. Install Bandit and Run SAST on backend services (Bandit)
      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit on backend services which will fail on high severity and confidence
        run: |
          bandit -r backend/product_service backend/order_service backend/customer_service \
            --severity-level high --confidence-level high \
            | tee bandit-report.txt

      # 10. SAST Backend Report with Bandit generated 
      - name: Generate Bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.txt

      # 11. Run SAST on frontend (ESLint Security) and static analysis (code quality check as part of functionality)
      - name: Run frontend security lint
        working-directory: frontend
        run: npm run lint -- --max-warnings=5 2>&1 | tee eslint-report.txt

      # 12. SAST Frontend Report with ESLint generated 
      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: frontend/eslint-report.txt

      # 13. Install Snyk and Run SCA on both backend and frontend services (Snyk)
      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk test on backend services which will fail on high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk test --file=backend/product_service/requirements.txt --package-manager=pip --severity-threshold=high \
            | tee snyk-product.txt
          snyk test --file=backend/order_service/requirements.txt --package-manager=pip --severity-threshold=high \
            | tee snyk-order.txt
          snyk test --file=backend/customer_service/requirements.txt --package-manager=pip --severity-threshold=high \
            | tee snyk-customer.txt

      - name: Run Snyk test on frontend which will fail on high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: frontend
        run: snyk test --severity-threshold=high | tee snyk-frontend.txt

      # 14. SAC Report with Snyk Generated
      - name: Upload Snyk reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-reports
          path: |
            snyk-*.txt

  # Job 2: Build and Push Docker Images (runs only if tests pass)
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_all_services

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Azure login using a Service Principal secret
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Login to Azure Container Registry (ACR)
    - name: Login to Azure Container Registry
      run: az acr login --name ${{ vars.ACR_NAME }}

    # Build and Push Docker image for Product Service
    - name: Build and Push Product Service Image
      run: |
        docker build -t ${{ vars.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
        docker push ${{ vars.ACR_LOGIN_SERVER }}/product_service:latest

    # Build and Push Docker image for Order Service
    - name: Build and Push Order Service Image
      run: |
        docker build -t ${{ vars.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
        docker push ${{ vars.ACR_LOGIN_SERVER }}/order_service:latest

    # Build and Push Docker image for Customer Service
    - name: Build and Push Customer Service Image
      run: |
        docker build -t ${{ vars.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service/
        docker push ${{ vars.ACR_LOGIN_SERVER }}/customer_service:latest

    # Build and Push Docker image for Frontend 
    - name: Build and Push Frontend Image
      run: |
        docker build -t ${{ vars.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
        docker push ${{ vars.ACR_LOGIN_SERVER }}/frontend:latest

    # Logout from Azure for security (runs even if image push fails)
    - name: Logout from Azure
      run: az logout
      if: always()
